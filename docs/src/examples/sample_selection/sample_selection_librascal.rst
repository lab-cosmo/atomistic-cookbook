
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/sample_selection/sample_selection_librascal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_sample_selection_sample_selection_librascal.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_sample_selection_sample_selection_librascal.py:


Sample Selection with FPS and CUR (librascal)
=============================================

.. start-body

In this tutorial we generate descriptors using librascal, then select a subset
of structures using both the farthest-point sampling (FPS) and CUR algorithms
implemented in scikit-matter.

.. GENERATED FROM PYTHON SOURCE LINES 12-13

First, import all the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 13-23

.. code-block:: default

    import ase.io
    import numpy as np
    from sklearn.decomposition import PCA

    import chemiscope
    from rascal.representations import SphericalInvariants
    from rascal.utils import FPSFilter
    from skmatter import sample_selection, feature_selection









.. GENERATED FROM PYTHON SOURCE LINES 24-29

Load molecular data
-------------------

Load 100 example BTO structures from file, reading them using
`ASE <https://wiki.fysik.dtu.dk/ase/>`_.

.. GENERATED FROM PYTHON SOURCE LINES 29-39

.. code-block:: default


    # Load a subset of structures of the example dataset
    n_frames = 250
    frames = ase.io.read("./dataset/input-fps.xyz", f":{n_frames}", format="extxyz")

    # librascal requires the atomic positions to be wrapped in the cell
    for frame in frames:
        frame.wrap(eps=1.0e-12)









.. GENERATED FROM PYTHON SOURCE LINES 40-44

Compute SOAP descriptor using librascal
---------------------------------------

First, define the librascal hyperparameters used to compute SOAP.

.. GENERATED FROM PYTHON SOURCE LINES 44-89

.. code-block:: default


    # librascal hyperparameters
    soap_hypers = {
        "soap_type": "PowerSpectrum",
        "interaction_cutoff": 6.0,
        "max_radial": 8,
        "max_angular": 6,
        "gaussian_sigma_constant": 0.3,
        "gaussian_sigma_type": "Constant",
        "cutoff_function_type": "RadialScaling",
        "cutoff_smooth_width": 0.5,
        "cutoff_function_parameters": {
            "rate": 1,
            "scale": 3.5,
            "exponent": 4,
        },
        "radial_basis": "GTO",
        "normalize": True,
        "optimization": {
            "Spline": {
                "accuracy": 1.0e-05,
            },
        },
        "compute_gradients": False,
    }

    # Generate a SOAP spherical expansion
    soap = SphericalInvariants(**soap_hypers)

    # Perform a data trasnformation and get the descriptor with samples as atomic environments
    atom_dscrptr = soap.transform(frames).get_features(soap)

    # Calculate the stucture features as the mean over the atomic features for each
    # structure
    struct_dscrptr = np.zeros((len(frames), atom_dscrptr.shape[1]))
    atom_idx_start = 0
    for i, frame in enumerate(frames):
        atom_idx_stop = atom_idx_start + len(frame.numbers)
        struct_dscrptr[i] = atom_dscrptr[atom_idx_start:atom_idx_stop].mean(axis=0)
        atom_idx_start = atom_idx_stop

    print("atom feature descriptor shape:", atom_dscrptr.shape)
    print("structure feature descriptor shape:", struct_dscrptr.shape)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    atom feature descriptor shape: (10000, 2688)
    structure feature descriptor shape: (250, 2688)




.. GENERATED FROM PYTHON SOURCE LINES 90-99

Perform structure (i.e. sample) selection
-----------------------------------------

Using FPS and CUR algorithms implemented in scikit-matter, select a subset of
the structures. skmatter assumes that our descriptor is represented as a 2D
matrix, with the samples along axis 0 and features along axis 1.

For more info on the functions: `skmatter
<https://scikit-cosmo.readthedocs.io/en/latest/selection.html>`_

.. GENERATED FROM PYTHON SOURCE LINES 99-125

.. code-block:: default


    # Define the number of structures to select using FPS/CUR
    n_structures = 25

    # FPS sample selection
    struct_fps = sample_selection.FPS(n_to_select=n_structures, initialize="random").fit(
        struct_dscrptr
    )
    struct_fps_idxs = struct_fps.selected_idx_

    # CUR sample selection
    struct_cur = sample_selection.CUR(n_to_select=n_structures).fit(struct_dscrptr)
    struct_cur_idxs = struct_cur.selected_idx_

    print("Structure indices obtained with FPS ", struct_fps_idxs)
    print("Structure indices obtained with CUR ", struct_cur_idxs)

    # Slice structure descriptor along axis 0 to contain only the selected structures
    struct_dscrptr_fps = struct_dscrptr[struct_fps_idxs, :]
    struct_dscrptr_cur = struct_dscrptr[struct_cur_idxs, :]
    assert struct_dscrptr_fps.shape == struct_dscrptr_cur.shape

    print("Structure descriptor shape before selection ", struct_dscrptr.shape)
    print("Structure descriptor shape after selection ", struct_dscrptr_fps.shape)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Structure indices obtained with FPS  [172 220   2 196  97 195 140 219 194  75 238 120 163  58 166  70 114  71
     222  40 110  39 223  55 130]
    Structure indices obtained with CUR  [203 140 219   2 110 196 194  97 156 120  55  71 223 166 198 238  70 183
      19 128 172 229 130  68  39]
    Structure descriptor shape before selection  (250, 2688)
    Structure descriptor shape after selection  (25, 2688)




.. GENERATED FROM PYTHON SOURCE LINES 126-135

Visualize selected structures with chemiscope
---------------------------------------------

sklearn can be used to perform PCA dimensionality reduction on the SOAP
descriptors. The resulting PC coordinates can be used to visualize the the
data alongside their structures in a chemiscope widget.

Note: chemiscope widgets are not currently integrated into our sphinx gallery:
coming soon.

.. GENERATED FROM PYTHON SOURCE LINES 135-163

.. code-block:: default


    # Generate a structure PCA
    struct_dscrptr_pca = PCA(n_components=2).fit_transform(struct_dscrptr)
    assert struct_dscrptr_pca.shape == (n_frames, 2)

    # Selected level
    selection_levels = []
    for i in range(len(frames)):
        level = 0
        if i in struct_cur_idxs:
            level += 1
        if i in struct_fps_idxs:
            level += 2
        selection_levels.append(level)


    properties = {
        "PC1": struct_dscrptr_pca[:, 0],
        "PC2": struct_dscrptr_pca[:, 1],
        "Selection: (1) CUR, (2) FPS, (3) both": np.array(selection_levels),
    }


    # Display with chemiscope. This currently does not work - as raised in issue #8
    # https://github.com/lab-cosmo/software-cookbook/issues/8
    # chemiscope.show(frames, properties=properties)









.. GENERATED FROM PYTHON SOURCE LINES 164-170

Perform feature selection
-------------------------

Now perform feature selection. In this example we will go back to using the
descriptor decomposed into atomic environments, as opposed to the one
decomposed into structure environments, but only use FPS for brevity.

.. GENERATED FROM PYTHON SOURCE LINES 170-188

.. code-block:: default


    # Define the number of features to select
    n_features = 200

    # FPS feature selection
    feat_fps = feature_selection.FPS(n_to_select=n_features, initialize="random").fit(
        atom_dscrptr
    )
    feat_fps_idxs = feat_fps.selected_idx_

    print("Feature indices obtained with FPS ", feat_fps_idxs)

    # Slice atomic descriptor along axis 1 to contain only the selected features
    atom_dscrptr_fps = atom_dscrptr[:, feat_fps_idxs]

    print("atomic descriptor shape before selection ", atom_dscrptr.shape)
    print("atomic descriptor shape after selection ", atom_dscrptr_fps.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Feature indices obtained with FPS  [2607    0 1064  560   21    7  195  728   35 2016 1071  567 1089  203
      189 2240  588   28  632 1232 1344 1085  735   91  756  130  196 2023
     1098 1036  637  133  462  193 1092  630 1096  707  210  634  812  749
      202   84  636  315 2247  643  917 1141 2048  209  644  151 1197  483
     1204  592 2037 1211  651 1820 1176  657  147 1210 1040 1960  924   77
     1472  322 1078  616 1981 1112 2492 1105  650  518  129   14  252  504
      641 1931  688 2050 2429 1987  455 1365  140 1148  672 1091 2433 1103
      805 1106  139  126 1253 2044 1208 1476 2436 1218  194 1029 1470  378
      469  259  784 1260  595 1042 1596 1008 1351  623 1936  217  931 1099
     1537 1848  476 2496 1927  910  706 2104  973 2282 1540  679 1154   83
     2093  980 2268  207 2498 1934  266  655 1983 1372  539   42 1904   70
      692 1475 1600 1988 1316  585   74 1015 1120  581  798 2442 2041 1043
     1033   63 1309 1474  629 2113  693  742  131 1985  258 1992 1113 2440
       49 1145 2254  329 1183 1813  690  959  700 1127  137  490 2156 2072
      686  511  840 1162]
    atomic descriptor shape before selection  (10000, 2688)
    atomic descriptor shape after selection  (10000, 200)





.. _sphx_glr_download_examples_sample_selection_sample_selection_librascal.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: sample_selection_librascal.py <sample_selection_librascal.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: sample_selection_librascal.ipynb <sample_selection_librascal.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
